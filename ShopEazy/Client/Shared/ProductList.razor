@inject IProductClientServices ProductClientServices
@using ShopEazy.Shared.Models
@using ShopEazy.Shared
@implements IDisposable

@if (ProductClientServices.Products == null || ProductClientServices.Products.Count == 0)
{
    <span>@ProductClientServices.Message</span>

}
else
{
    <ul class="list-unstyled">
        @foreach (var Product in ProductClientServices.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@Product.Id">
                        <img class="media-img" src="@Product.ImageUrl" alt="@Product.Title" />
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@Product.Id">
                        <h4 class="mb-0">@Product.Title</h4>
                    </a>
                    <p>@Product.Description</p>
                    <h5 class="price">
                        <span class="currency">&#8377;</span>
                        @GetPriceText(Product)
                    </h5>
                </div>
            </li>
        }
    </ul>
}
@code {


    protected override void OnInitialized()
    {
        // await ProductClientServices.GetProducts();
        ProductClientServices.ProductsSelectionChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductClientServices.ProductsSelectionChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var Variants = product.Variants;
        if(Variants.Count == 0)
        {
            return String.Empty;

        }else if (Variants.Count == 1)
        {
            return $"{Variants[0].Price}";
        }
        var minPrice = Variants.Min(v => v.Price);
        return $"Starting at {minPrice}";
    }
}
